# -*- coding: utf-8 -*-
"""laptop price predictions

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1W1bv0RdM2ZWt6jzKB4Ff3NaBg867FrtV

# **Libraries**
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

#importing the data set

data = pd.read_csv('/content/laptop_data.csv')

data.head()

data.info()

data.isnull().sum()

data = data.drop_duplicates()

data.shape

data.dtypes

data

data = data.drop('Unnamed: 0',axis = 1)

data

data['Ram'] = data['Ram'].str.replace('GB','')
data['Weight'] = data['Weight'].str.replace('kg','')

data

data['Ram'] = data['Ram'].astype('int32')

data['Weight'] = data['Weight'].astype('float32')

data.info()

plt.figure(figsize=(10,8))

data['Company'].value_counts().plot(kind = 'barh')

plt.figure(figsize=(10,8))
(data.groupby('Company')['Price'].mean()).sort_values().plot(kind = 'barh')

plt.figure(figsize=(10,8))

data['Memory'].value_counts().plot(kind = 'barh')

plt.figure(figsize=(10,8))
(data.groupby('Memory')['Price'].mean()).sort_values().plot(kind = 'barh')

plt.figure(figsize=(25,8))

data['Gpu'].value_counts().plot(kind = 'bar')

plt.figure(figsize=(20,8))
(data.groupby('Gpu')['Price'].mean()).sort_values().plot(kind = 'bar')

plt.figure(figsize=(10,8))

data['OpSys'].value_counts().plot(kind = 'bar')

plt.figure(figsize=(20,8))
(data.groupby('OpSys')['Price'].mean()).sort_values().plot(kind = 'bar')

plt.figure(figsize=(25,8))

data['Cpu'].value_counts().plot(kind = 'bar')

plt.figure(figsize=(10,25))
(data.groupby('Cpu')['Price'].mean()).sort_values().plot(kind = 'barh')

data.info()

plt.figure(figsize=(10,8))

plt.scatter(x = data['Inches'],y = data['Price'])

plt.figure(figsize=(10,8))

plt.scatter(x = data['Ram'],y = data['Price'])

plt.figure(figsize=(10,8))

plt.scatter(x = data['Weight'],y = data['Price'])

data['ScreenResolution'].value_counts()

data['TouchScreen'] = data['ScreenResolution'].apply(lambda x:1 if 'Touchscreen' in x else 0)

data.head()

data['TouchScreen'].value_counts().plot(kind = 'bar')

sns.barplot(x = data['TouchScreen'],y = data['Price'])

data['IPS_Panal'] = data['ScreenResolution'].apply(lambda x:1 if 'IPS' in x else 0)

data.sample(5)

data['IPS_Panal'].value_counts().plot(kind = 'bar')

sns.barplot(x = data['IPS_Panal'],y = data['Price'])

new = data['ScreenResolution'].str.split('x',n=1,expand =True)
new

data['x_Resolution'] = new[0]
data['y_Resolution'] = new [1]

data.head()

# we are writing a regular expression that take only 4 digit number from string
data['x_Resolution']=data['x_Resolution'].str.replace(',','').str.findall(r'(\d+\.?\d+)').apply(lambda x:x[0])

data

data['x_Resolution'] = data['x_Resolution'].astype('int32')
data['y_Resolution'] = data['y_Resolution'].astype('int32')

data.corr()['Price']

data['ppi'] =(((data['x_Resolution']**2) + (data['y_Resolution']**2))**0.5/data['Inches']).astype('float')

data.head()

data.drop(columns = ['ScreenResolution','Inches','x_Resolution','y_Resolution'])

data['Cpu'].value_counts()

data['Cpu Name'] = data['Cpu'].apply(lambda x : ' '.join (x.split()[0:3] ))

data

def Processor(text):
  if text == 'Intel Core i7' or text == 'Intel Core i5' or text ==  'Intel Core i3':
    return text
  elif text.split()[0] == 'Intel':
    return 'other intel processor'
  else:
    return 'AMD processor'

data['cpu_Brand'] = data['Cpu Name'].apply(Processor)

data.sample(10)

data.drop(columns = ['Cpu','Cpu Name'], inplace = True)

data['cpu_Brand'].value_counts().plot(kind = 'bar')

plt.figure (figsize=(10,8))
sns.barplot(x = data['cpu_Brand'],y =data['Price'])

data.sample(5)

data['Memory'] = data['Memory'].astype(str).replace('\.0', '',regex = True)
data['Memory'] = data['Memory'].str.replace('GB', '')
data['Memory'] = data['Memory'].str.replace("TB", '000')

new = data['Memory'].str.split('+',n = 1 ,expand = True)

data['first'] = new[0]

data['first'] = data['first'].str.strip()

data['second'] = new[1]

data['layer1HDD'] = data['first'].apply(lambda x: 1 if 'HDD' in x else 0)
data['layer1SSD'] = data['first'].apply(lambda x: 1 if 'SSD' in x else 0)
data['layer1Hybird'] = data['first'].apply(lambda x: 1 if 'Hybird' in x else 0)
data['layer1Flash_storage'] = data['first'].apply(lambda x :1 if 'Flash Storage' in x else 0)

data['first'] = data['first'].str.replace(r'\D', '')




data['second'].fillna('0', inplace = True)
data['layer2HDD'] = data['second'].apply(lambda x: 1 if 'HDD' in x else 0)
data['layer2SSD'] = data['second'].apply(lambda x: 1 if 'SSD' in x else 0)
data['layer2Hybird'] = data['second'].apply(lambda x: 1 if 'Hybird' in x else 0)
data['layer2Flash_storage'] = data['second'].apply(lambda x :1 if 'Flash Storage' in x else 0) 

data['second'] = data['second'].str.replace(r'\D', '')

data['first'] = data['first'].astype(int)
data['second'] = data['second'].astype(int)

data['HDD'] = (data['first']*data['layer1HDD']+data['second']*data['layer2HDD'])
data['SSD'] = (data['first']*data['layer1SSD']+data['second']*data['layer2SSD'])
data['Hybird'] = (data['first']*data['layer1Hybird']+data['second']*data['layer2Hybird'])
data['Falsh_storage'] = (data['first']*data['layer1Flash_storage']+data['second']*data['layer2Flash_storage'])

data.sample(10)

data.drop(columns = ['layer1Hybird','layer1Flash_storage','layer1HDD','layer2SSD','layer2HDD','layer2SSD','layer2Hybird','layer2Hybird','ScreenResolution','Inches'],inplace = True)

data.drop(columns = ['Memory','first','second','layer1SSD','layer2Flash_storage'],inplace = True)

data.drop(columns = ['x_Resolution','y_Resolution'],inplace = True)

data.sample(10)

data.corr()['Price']

data.drop(columns= ['Hybird','Falsh_storage'],inplace = True)

data.head()

data['Gpu'].value_counts()

data['Gpu_brand'] = data['Gpu'].apply(lambda x :x.split()[0])

data['Gpu_brand'].value_counts()

data[data['Gpu_brand'] == 'ARM']

data = data[data['Gpu_brand'] != 'ARM']

data['Gpu_brand'].value_counts()

sns.barplot(x = data['Gpu_brand'],y = data['Price'])

data['OpSys'].value_counts()

plt.figure(figsize=(10,8))

sns.barplot(x = data['OpSys'],y = data['Price'])

def cat_opsys(os):
  if os == 'Windows 10' or os == 'Windows 7' or os == 'Windows 10 S':
    return 'Windows'
  elif os == 'macOS' or os == 'Mac OS X':
    return 'Mac'

  else:
    return 'No OS/Linux/Chrome OS/Android'

data["Op_system"] = data['OpSys'].apply(cat_opsys)

data

data.drop(columns = ['Gpu','OpSys'],inplace = True)

data

sns.barplot(x = data['Op_system'],y = data['Price'])

plt.figure(figsize=(10,8))
sns.heatmap(data.corr())

sns.distplot(data['Price'])

sns.distplot(np.log(data['Price']))

"""# **Splitting the data into Train and Test**"""

from sklearn.model_selection import train_test_split

x = data.drop(['Price'],axis = 1)

y = np.log(data['Price'])

x_train,x_test,y_train,y_test = train_test_split(x,y,test_size = 0.2,random_state = 7)

x_train.shape,x_test.shape

from sklearn.preprocessing import OneHotEncoder
from sklearn.compose import ColumnTransformer
from sklearn.pipeline import Pipeline
from sklearn.linear_model import LinearRegression,Ridge,Lasso
from sklearn.neighbors import KNeighborsRegressor
from sklearn.tree import DecisionTreeRegressor
from sklearn.svm import SVR
from xgboost import XGBRegressor
from sklearn.metrics import r2_score,mean_absolute_error
from sklearn.ensemble import RandomForestRegressor,GradientBoostingRegressor,AdaBoostRegressor,ExtraTreesRegressor

"""# **LogisticRegression**"""

step1 = ColumnTransformer(transformers=[('col_tnf',OneHotEncoder(sparse = False,drop = 'first'),[0,1,7,10,11])
],remainder = 'passthrough')

step2 = LinearRegression()

pipe = Pipeline([
    ('step1',step1),
    ('step2',step2)
])

pipe.fit(x_train,y_train)
pred = pipe.predict(x_test)

print('R2_score:',r2_score(pred,y_test))
print('MAE :',mean_absolute_error(pred,y_test))

"""# **Ridge Regression**"""

step1 = ColumnTransformer(transformers=[('col_tnf',OneHotEncoder(sparse = False,drop = 'first'),[0,1,7,10,11])
],remainder = 'passthrough')

step2 = Ridge(alpha=10)

pipe = Pipeline([
    ('step1',step1),
    ('step2',step2)
])

pipe.fit(x_train,y_train)
pred = pipe.predict(x_test)

print('R2_score:',r2_score(pred,y_test))
print('MAE :',mean_absolute_error(pred,y_test))

"""# **Lasso Regression**"""

step1 = ColumnTransformer(transformers=[('col_tnf',OneHotEncoder(sparse = False,drop = 'first'),[0,1,7,10,11])
],remainder = 'passthrough')

step2 = Lasso(alpha=0.001)

pipe = Pipeline([
    ('step1',step1),
    ('step2',step2)
])

pipe.fit(x_train,y_train)
pred = pipe.predict(x_test)

print('R2_score:',r2_score(pred,y_test))
print('MAE :',mean_absolute_error(pred,y_test))

"""# **KNeighborsRegressor**"""

step1 = ColumnTransformer(transformers=[('col_tnf',OneHotEncoder(sparse = False,drop = 'first'),[0,1,7,10,11])
],remainder = 'passthrough')

step2 = KNeighborsRegressor(n_neighbors=4)

pipe = Pipeline([
    ('step1',step1),
    ('step2',step2)
])

pipe.fit(x_train,y_train)
pred = pipe.predict(x_test)

print('R2_score:',r2_score(pred,y_test))
print('MAE :',mean_absolute_error(pred,y_test))

"""# **DecisionTreeRegressor**"""

step1 = ColumnTransformer(transformers=[('col_tnf',OneHotEncoder(sparse = False,drop = 'first'),[0,1,7,10,11])
],remainder = 'passthrough')

step2 = DecisionTreeRegressor(max_depth = 8)

pipe = Pipeline([
    ('step1',step1),
    ('step2',step2)
])

pipe.fit(x_train,y_train)
pred = pipe.predict(x_test)

print('R2_score:',r2_score(pred,y_test))
print('MAE :',mean_absolute_error(pred,y_test))

"""# **SVM**"""

step1 = ColumnTransformer(transformers=[('col_tnf',OneHotEncoder(sparse = False,drop = 'first'),[0,1,7,10,11])
],remainder = 'passthrough')

step2 = SVR(kernel = 'rbf',C= 5000,epsilon = 0.1)

pipe = Pipeline([
    ('step1',step1),
    ('step2',step2)
])

pipe.fit(x_train,y_train)
pred = pipe.predict(x_test)

print('R2_score:',r2_score(pred,y_test))
print('MAE :',mean_absolute_error(pred,y_test))

"""# **Random Forest**"""

step1 = ColumnTransformer(transformers=[('col_tnf',OneHotEncoder(sparse = False,drop = 'first'),[0,1,7,10,11])
],remainder = 'passthrough')

step2 = RandomForestRegressor(n_estimators=100,
                              random_state =7,
                              max_samples = 0.5,
                              max_features=0.75,
                              max_depth=20)

pipe = Pipeline([
    ('step1',step1),
    ('step2',step2)
])

pipe.fit(x_train,y_train)
pred = pipe.predict(x_test)

print('R2_score:',r2_score(pred,y_test))
print('MAE :',mean_absolute_error(pred,y_test))

"""# **Extra Tree**"""

step1 = ColumnTransformer(transformers=[('col_tnf',OneHotEncoder(sparse = False,drop = 'first'),[0,1,7,10,11])
],remainder = 'passthrough')

step2 = ExtraTreesRegressor(n_estimators=100,
                              random_state =7,
                            max_samples=None,
                              max_features=0.75,
                            
                              max_depth=20)
pipe = Pipeline([
    ('step1',step1),
    ('step2',step2)
])

pipe.fit(x_train,y_train)
pred = pipe.predict(x_test)

print('R2_score:',r2_score(pred,y_test))
print('MAE :',mean_absolute_error(pred,y_test))

"""# **Ada boost Regression** """

step1 = ColumnTransformer(transformers=[('col_tnf',OneHotEncoder(sparse = False,drop = 'first'),[0,1,7,10,11])
],remainder = 'passthrough')

step2 = AdaBoostRegressor(n_estimators = 14,learning_rate = 1.0)


pipe = Pipeline([
    ('step1',step1),
    ('step2',step2)
])

pipe.fit(x_train,y_train)
pred = pipe.predict(x_test)

print('R2_score:',r2_score(pred,y_test))
print('MAE :',mean_absolute_error(pred,y_test))

"""# **Gradient Boost** """

step1 = ColumnTransformer(transformers=[('col_tnf',OneHotEncoder(sparse = False,drop = 'first'),[0,1,7,10,11])
],remainder = 'passthrough')

step2 = GradientBoostingRegressor(n_estimators = 500)


pipe = Pipeline([
    ('step1',step1),
    ('step2',step2)
])

pipe.fit(x_train,y_train)
pred = pipe.predict(x_test)

print('R2_score:',r2_score(pred,y_test))
print('MAE :',mean_absolute_error(pred,y_test))

"""# **XG Boost**"""

step1 = ColumnTransformer(transformers=[('col_tnf',OneHotEncoder(sparse = False,drop = 'first'),[0,1,7,10,11])
],remainder = 'passthrough')

step2 = XGBRegressor(n_estimators = 500)


pipe = Pipeline([
    ('step1',step1),
    ('step2',step2)
])

pipe.fit(x_train,y_train)
pred = pipe.predict(x_test)

print('R2_score:',r2_score(pred,y_test))
print('MAE :',mean_absolute_error(pred,y_test))

"""# **Voting Regressor**"""

from sklearn.ensemble import VotingRegressor ,StackingRegressor

step1 = ColumnTransformer(transformers=[('col_tnf',OneHotEncoder(sparse = False,drop = 'first'),[0,1,7,10,11])
],remainder = 'passthrough')

xgb = XGBRegressor(n_estimators = 500)

gbr = GradientBoostingRegressor(n_estimators = 500)

rf = RandomForestRegressor(n_estimators=100,random_state =7,max_samples = 0.5,max_features=0.75,max_depth=20)

ex =  ExtraTreesRegressor(n_estimators=100,random_state =7,max_samples=None,max_features=0.75,max_depth=20)

step2 = VotingRegressor([('xgb',xgb),('gbr',gbr),('rf',rf),('ex',ex)],weights=[5,1,1,1])


pipe = Pipeline([
    ('step1',step1),
    ('step2',step2)
])


pipe.fit(x_train,y_train)
pred = pipe.predict(x_test)

print('R2_score:',r2_score(pred,y_test))
print('MAE :',mean_absolute_error(pred,y_test))

step1 = ColumnTransformer(transformers=[('col_tnf',OneHotEncoder(sparse = False,drop = 'first'),[0,1,7,10,11])
],remainder = 'passthrough')

estimators = [('xgb', XGBRegressor(n_estimators = 500)),
              ('gbr',GradientBoostingRegressor(n_estimators = 500)),
              ('rf',RandomForestRegressor(n_estimators=100,random_state =7,max_samples = 0.5,max_features=0.75,max_depth=20))]


step2 = StackingRegressor(estimators = estimators,final_estimator= Ridge(alpha = 100))


pipe = Pipeline([
    ('step1',step1),
    ('step2',step2)
])


pipe.fit(x_train,y_train)
pred = pipe.predict(x_test)

print('R2_score:',r2_score(pred,y_test))
print('MAE :',mean_absolute_error(pred,y_test))



"""# **Exporting The Model**"""

import pickle
pickle.dump(data,open('data.pkl','wb'))

pickle.dump(pipe,open('pipe.pkl','wb'))